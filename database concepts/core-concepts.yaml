- What is a transaction:
  - A collection of queries that does one unit of work.
  - E.g., Deposit Money (Select, Update sender balance, update receiver balance)

  - transaction Lifespan:
    - Begin -> A transaction begins with keyword Begin that indicates that you are about to 
               start a transaction with multiple queries.
    - Commit -> This keyword tells the transaction to commit and persist to disk. 
                (Postgres commits are fastest because they commit every query and it does a lot of I/o)
    - Rollback -> If any query fails rollback the transaction and don't persist anything on disk. 

    - Transaction unexpected enging = Rollback (e.g., crash) :
      - If you db crashes, make sure once it comes back rollback of transactions must happen.
  
  - Nature of transaction:
    - Usually Transactions are used to chnage and modify data
    - However, it is perfectly normal to have a read onlu transaction
    - Example, you want to generate a report and you want to get consistent snapshot based at the time of transaction

- Acid Properties:

  - Atomicity:
    - All queries in a transaction must succeed.
    - If one query fails, all prior successful queries in the transaction should rollback.
    - If the database went down prior to a commit of a transaction, all the successful queries in the transaction should rollback. 
    - Lack of Atomicity leads to inconsitency.
  
  - Isolation:
    - Multiple transaction should happen without interference

    - Isolation levels for inflight transactions: 
      - Read uncommited -> No isolation, any change from the outside is visible to the transaction, commited or not.
      - Read commited -> Each query in a transaction only sees commited changes by other transactions. 
      - Repeatable Read -> The transaction will make sure that when a query reads a row, that row will remain unchanged the transaction 
                           while its running.
      - Snapshot -> Each query in a transaction only sees changes that have been commited up to the start of the transaction. 
      - Serializable -> Transactions are run as if they are serialized one after the other. (No concurrency, slowest)
      - Each DBMS implements isolation level differently.
  
  - Consistency:
    - Consistency in Data 
    - Consistency in reads (system as a whole, if you have multiple shards, partition, clusters) data is not in sync.
    - If atomicity and isolation is not followed correctly, your db will get into inconsistent state 
    - Types -> Strongly and eventually consistent 
  
  - Durablility:
    - Changes made by committed transactions must be persistent in a durbale non-volatiole storage.

    - Durability technqiues:
      - WAL -> write ahead log 
      - Aynchronous snapshot
      - Append only file (AOF)
    
    - Durability - OS Cache:
      - A write request in OS Usually goes to the OS Cache
      - When the writes go the OS cache, an OS crash, machine restart could lead to loss of data 
      - Fsync OS command forces writes to always go to disk (is generally slow)
      

- How Tables and Indexes are stored in a disk:
  - Row_id:
    - Internal and system maintained 
    - In certain databases it is the same as primary key but other databases like postgres have a system column row_id (tuple_id)
  
  - Page:   
    - Depending on the storage model (row vs column store), the rows are stored and read in logical pages 
    - The database doesn't read a single row, it reads a page or more in a single IO and we get a lot of rows in that IO
    - Each page has a size (e.g., 8KB in postgres)
    - Assume each page holds 3 rows then for 1001 rows you will have 333 pages 
  
  - IO:
    - IO operation (input / output) is a read request to the disk
    - We try to minimize this as much as possible 
    - An IO can fetch 1 page or more depending on the disk partitions and other factors 
    - An IO cannot read a single row, its a page with many rows in them 
    - You want to minimize the number of IOs as they are expensive 
    - Some IOs in operating systems goes to the os cache and not disk 
  
  - Heap: 
    - The heap is data structure where the table is stored with all it pages one after another.
    - This is where the actual data is stored including everything 
    - Traversing the heap is expensive as we need to read so many data to find what we want 
    - That is why we need indexes that help tell us exactly what part of the heap we need to read. what pages of the heap we need to pull 
  
  - Index: 
    - An index is another data structure separate from the heap that has pointers to the heap 
    - It has part of the data and used to quickly search for something 
    - You can index on one column on more 
    - Once you find a value of the index, you go to the heap to fetch more information where everything is there 
    - Index tells you exactly which page to fetch in the heap 
    - Index is also store as pages and cost IO to pull the entries of the index 
    - The smaller the index, the more it can fit in memory the faster the search 
    - Popular data structure for index is b-trees 

    - Syntax: create index index_name on table_name(column_list separated by comma)
              create index index_name on table_name(column_list) include (column_list)
            
      significance of include clause:
        - If the column is not in the WHERE/JOIN/GROUP BY/ORDER BY, but only in the column list in the SELECT clause is where you use INCLUDE.
        - The INCLUDE clause adds the data at the lowest/leaf level, rather than in the index tree. This makes the index smaller because it's not part of the tree
        - INCLUDE columns are not key columns in the index, so they are not ordered. This means it isn't really useful for predicates, sorting etc as I mentioned above.
          However, it may be useful if you have a residual lookup in a few rows from the key column(s)

  
  - Row vs Column Based Database: 
    
    - Row-Oriented Database:
      - Tables are stored as rows in disk 
      - A single block io read to the table fetches multiple rows with all their columns 
      - More IOs are required to find a particular row in a table scan but once you find the row you get all columns for that row 

      - Pros and cons: 
        - Optimal for read/writes 
        - OLTP 
        - Compression isn't efficient 
        - Aggregation isn't efficient 
        - Efficient queries w/multi-columns 

    - Column-Oriented Database:
      - Tables are stores as columns first in disk 
      - A single block io read to the table fetches multiple columns with all matching rows 
      - Less IOs are required to get more values of a given column. But working with multiple columns require more IOs. 

      - Pros and cons: 
        - Writes are slower 
        - OLAP 
        - Compress greatly ( salary=1000 -> john, andy )
        - Amazing for Aggregation 
        - Inefficient queries w/multi-columns
      
    
      
    





    


    